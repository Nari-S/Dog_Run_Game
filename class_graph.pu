@startuml

package Player {
    package Dog {
        interface IStepMover
        interface IStraightMover
        interface ISideMover
        interface IJumpMover
        interface IHungerManager
        interface IWaterContentManager
        interface IObstacleReceivable
        class PeeCreator
        class HungerManager
        class WaterContentManager
        class ObstacleEventNotifier
        class DogJumpMover
        class DogAudioController
        class DogStepMover
        class DogSideMover
        class DogStraightMover
        class MoveManager
        class DogAnimationManager
    }

    package Pee {
        class Pee
    }

    package Camera {
        class ReverseCameraManager
        class AspectKeper
    }
}

'Player内
PeeCreator ..> Pee
IWaterContentManager <-- PeeCreator
IHungerManager <|.. HungerManager
IWaterContentManager <|.. WaterContentManager
IObstacleReceivable <|.. ObstacleEventNotifier
DogJumpMover --> DogAudioController
DogStepMover --> ReverseCameraManager
DogStepMover --> DogAnimationManager
DogStepMover --> HungerManager
IStepMover <|.. DogStepMover
DogSideMover --> ReverseCameraManager
DogSideMover --> IStepMover
ISideMover <|.. DogSideMover
IStraightMover <|.. DogStraightMover
DogStraightMover --> HungerManager
DogStraightMover --> DogAudioController
DogStraightMover --> DogAnimationManager
MoveManager --> IStraightMover
MoveManager --> IJumpMover
MoveManager --> ISideMover
MoveManager --> IStepMover

package Item {
     class Item
}

'Item⇔Player
Item ..> IHungerManager 
Item ..> DogAudioController

package Water {
     class Water
}

'Water⇔Player
Water ..> IWaterContentManager
Water ..> DogAudioController

package Obstacle {
     class Obstacle
}

'Obstacle⇔Player
Obstacle ..> IObstacleReceivable
Obstacle ..> DogAudioController

package Enemy {
    package Grandma {
        interface IEnemyStraightMover
        interface IEnemySideMover
        interface IEnemyHungerManager
        interface IPeeReceivable
        class GrandmaMoveManager
        class GrandmaAttackManager
        class GrandmaRushMover
        class GrandmaBallThrower
        class GrandmaSideMover
        class GrandmaStraightMover
        class GrandmaHungerManager
        class GrandmaStaggerMover
        class MoveVectorRevisorInDisplay
        class GrandmaAnimationManager
        class GrandmaCollisionDetector
        class GrandmaAudioController
    }

    package Ball {
        class BallController
        class BallHungerDamager
    }
}

'Grandma内
GrandmaAttackManager --> GrandmaRushMover
GrandmaAttackManager --> GrandmaBallThrower
GrandmaAttackManager --> GrandmaStaggerMover
GrandmaMoveManager --> GrandmaRushMover
GrandmaMoveManager --> GrandmaBallThrower
GrandmaMoveManager --> GrandmaStaggerMover
IEnemyStraightMover <-- GrandmaMoveManager
IEnemySideMover <-- GrandmaMoveManager
IEnemyStraightMover <|.. GrandmaStraightMover
IEnemySideMover <|.. GrandmaSideMover
IEnemyHungerManager <-- GrandmaStraightMover
IEnemyHungerManager <|.. GrandmaHungerManager
IEnemyStraightMover <-- GrandmaRushMover
IEnemySideMover <-- GrandmaRushMover
IEnemyStraightMover <-- GrandmaBallThrower
IEnemySideMover <-- GrandmaBallThrower
IPeeReceivable <|.. GrandmaAttackManager
IPeeReceivable <|.. GrandmaHungerManager
GrandmaStaggerMover --> MoveVectorRevisorInDisplay
GrandmaStraightMover --> MoveVectorRevisorInDisplay
GrandmaStaggerMover <-- GrandmaAnimationManager
GrandmaRushMover <-- GrandmaAnimationManager
GrandmaBallThrower <-- GrandmaAnimationManager
GrandmaStaggerMover <-- GrandmaAudioController
GrandmaRushMover <-- GrandmaAudioController
GrandmaBallThrower <-- GrandmaAudioController

'Grandma⇔Ball
BallController ..> BallHungerDamager
GrandmaBallThrower ..> BallController

'Grandma⇔Player
GrandmaRushMover --> IStraightMover  
Pee ..> IPeeReceivable
DogAudioController <.. GrandmaCollisionDetector

'Ball⇔Player
IHungerManager <.. BallHungerDamager 
DogAudioController <.. BallHungerDamager

package GameManager {
    'class GameOverEventHandler
    class GameStatusManager
    class ScoreCounter
}

'GameManager⇔Player
'GameOverEventHandler --> IObstacleReceivable
'GameOverEventHandler --> IHungerManager
GameStatusManager --> IObstacleReceivable
GameStatusManager --> IHungerManager
ScoreCounter --> PeeCreator
ScoreCounter ..> Pee

@enduml